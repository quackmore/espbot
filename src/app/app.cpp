/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <quackmore-ff@yahoo.com> wrote this file.  As long as you retain this notice
 * you can do whatever you want with this stuff. If we meet some day, and you 
 * think this stuff is worth it, you can buy me a beer in return. Quackmore
 * ----------------------------------------------------------------------------
 */

// SDK includes
extern "C"
{
#include "mem.h"
#include "library_dio_task.h"
#include "esp8266_io.h"
}

#include "app.hpp"
#include "espbot_cron.hpp"
#include "espbot_global.hpp"
#include "espbot_utils.hpp"
#include "library_dht.hpp"

/*
 *  APP_RELEASE is coming from git
 *  'git --no-pager describe --tags --always --dirty'
 *  and is generated by the Makefile
 */

#ifndef APP_RELEASE
#define APP_RELEASE "Unavailable"
#endif

char *app_name = "App Example";
char *app_release = APP_RELEASE;

// Dht *dht22;

static void heartbeat_cb(void)
{
    TRACE("ESPBOT HEARTBEAT: ---------------------------------------------------");
    uint32 current_timestamp = esp_sntp.get_timestamp();
    // TRACE("ESPBOT HEARTBEAT: [%d] [UTC+1] %s", current_timestamp, esp_sntp.get_timestr(current_timestamp));
    TRACE("ESPBOT HEARTBEAT: Available heap size: %d", system_get_free_heap_size());
}

uint32 lastRebootTime;

void app_init_before_wifi(void)
{
    lastRebootTime = 0;
    init_dio_task();
    // dht22 = new Dht(ESPBOT_D2, DHT22, 1000, 2000, 0, 10);
    cron_add_job(0, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, heartbeat_cb);
    cron_add_job(10, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, heartbeat_cb);
    cron_add_job(20, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, heartbeat_cb);
    cron_add_job(30, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, heartbeat_cb);
    cron_add_job(40, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, heartbeat_cb);
    cron_add_job(50, CRON_STAR, CRON_STAR, CRON_STAR, CRON_STAR, heartbeat_cb);
    cron_sync();
}

os_timer_t delay_after_wifi;

// give some time to sntp to setup everything ...
void app_init_after_wifi_delayed(void)
{
    static bool first_time = true;
    if (first_time)
    {
        lastRebootTime = esp_sntp.get_timestamp();

        first_time = false;
    }
}

void app_init_after_wifi(void)
{
    esp_mDns.start(espbot.get_name());
    os_timer_disarm(&delay_after_wifi);
    os_timer_setfn(&delay_after_wifi, (os_timer_func_t *)app_init_after_wifi_delayed, NULL);
    os_timer_arm(&delay_after_wifi, 5000, 0);

    static bool first_time = true;
    if (first_time)
    {
        first_time = false;
    }
    // test if sntp get_timestamp works fine
    uint32 timestamp = esp_sntp.get_timestamp();
    fs_printf("=======> current timestamp %s\n", esp_sntp.get_timestr(timestamp));
}

uint32 get_last_reboot_date(void)
{
    return lastRebootTime;
}

void app_deinit_on_wifi_disconnect()
{
    esp_mDns.stop();
}